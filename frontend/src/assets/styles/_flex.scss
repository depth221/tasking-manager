/**
 * Flexbox utilities. All class sets include `*-mm`, `*-ml`, and `*-mxl` variations to target screen sizes.
 *
 * Usage must fit the following pattern:
 * - `flex-parent` rules control the parent container, while `flex-child` rules control the children.
 * - By default, the `main` axis is horizontal and the `cross` axis is vertical. The axes can be inverted with the use of `flex-parent--column`.
 * - To learn about how the flexbox system works, check out ["A Complete Guide to Flexbox"](https://css-tricks.com/snippets/css/a-guide-to-flexbox).
 *
 * @section Flexbox
 * @memberof Layout
 */

/**
 * Establish an element as a flex parent.
 * These classes allow the use of `flex-parent--*` modifiers, and `flex-child` classes on children.
 *
 * @group
 * @memberof Flexbox
 * @example
 * <div class='bg-darken10 flex-parent'>flex-parent</div>
 * <div class='bg-darken10 flex-parent-inline'>flex-parent-inline</div>
 */
.flex-parent { display: flex !important; }
.flex-parent-inline { display: inline-flex !important; }
/** @endgroup */

/**
 * Set the direction of the main axis to top-to-bottom (default is left-to-right).
 *
 * @memberof Flexbox
 * @example
 * <div class='bg-darken10 flex-parent flex-parent--column'>
 *  <span class='flex-child'>1</span>
 *  <span class='flex-child'>2</span>
 *  <span class='flex-child'>3</span>
 * </div>
 */
.flex-parent--column { flex-direction: column !important; }

/**
 * Set the direction of the main axis to bottom-to-top (default is left-to-right).
 *
 * @memberof Flexbox
 * @example
 * <div class='bg-darken10 flex-parent flex-parent--column-reverse'>
 *  <span class='flex-child'>1</span>
 *  <span class='flex-child'>2</span>
 *  <span class='flex-child'>3</span>
 * </div>
 */
.flex-parent--column-reverse { flex-direction: column-reverse !important; }

/**
 * Set the direction of the main axis to left-to-right (the default value of `flex-parent`).
 *
 * @memberof Flexbox
 * @example
 * <div class='bg-darken10 flex-parent flex-parent--row'>
 *  <span class='flex-child'>1</span>
 *  <span class='flex-child'>2</span>
 *  <span class='flex-child'>3</span>
 * </div>
 */
.flex-parent--row { flex-direction: row !important; }

/**
 * Set the direction of the main axis to right-to-left (default is left-to-right).
 *
 * @memberof Flexbox
 * @example
 * <div class='bg-darken10 flex-parent flex-parent--row-reverse'>
 *  <span class='flex-child'>1</span>
 *  <span class='flex-child'>2</span>
 *  <span class='flex-child'>3</span>
 * </div>
 */
.flex-parent--row-reverse { flex-direction: row-reverse !important; }

/**
 * Center an element's children on the main axis.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent flex-parent--center-main bg-darken10'>
 *  <div class='flex-child bg-darken10'>child</div>
 * </div>
 */
.flex-parent--center-main { justify-content: center !important; }

/**
 * Center an element's children on the cross axis.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent flex-parent--center-cross bg-darken10 h120'>
 *  <div class='flex-child bg-darken10'>child</div>
 * </div>
 */
.flex-parent--center-cross { align-items: center !important; }

/**
 * Align an element's children to the start of the cross axis.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent flex-parent--start-cross h120 bg-darken10'>
 *  <div class='flex-child bg-darken10 h42'>child</div>
 *  <div class='flex-child bg-darken10'>child</div>
 * </div>
 */
.flex-parent--start-cross { align-items: flex-start !important; }

/**
 * Align an element's children to the start of the main axis.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent flex-parent--start-main bg-darken10'>
 *  <div class='flex-child bg-darken10'>child</div>
 * </div>
 */
.flex-parent--start-main { justify-content: flex-start !important; }

/**
 * Align an element's children to the end of the cross axis.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent flex-parent--end-cross h120 bg-darken10'>
 *  <div class='flex-child bg-darken10 h42'>child</div>
 *  <div class='flex-child bg-darken10'>child</div>
 * </div>
 */
.flex-parent--end-cross { align-items: flex-end !important; }

/**
 * Align an element's children to the end of the main axis.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent flex-parent--end-main bg-darken10'>
 *  <div class='flex-child bg-darken10'>child</div>
 * </div>
 */
.flex-parent--end-main { justify-content: flex-end !important; }

/**
 * Allow children to wrap. By default, they are all forced onto one line.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent flex-parent--wrap bg-darken10 scroll-hidden'>
 *  <div class='flex-child bg-darken10 w600'>child</div>
 *  <div class='flex-child bg-darken10 w600'>child</div>
 * </div>
 */
.flex-parent--wrap { flex-wrap: wrap !important; }

/**
 * Stretch children to fill the parent container along the cross axis.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent flex-parent--stretch-cross bg-darken10 h120'>
 *  <div class='flex-child bg-darken10'>child</div>
 * </div>
 */
.flex-parent--stretch-cross { align-items: stretch !important; }

/**
 * Evenly distribute children across the line, so first child is at the start
 * and last child is at the end.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent flex-parent--space-between-main bg-darken10 h120'>
 *  <div class='flex-child bg-darken10'>child</div>
 *  <div class='flex-child bg-darken10'>child</div>
 * </div>
 */
.flex-parent--space-between-main { justify-content: space-between !important; }

/**
 * Establish an element as a flex child. This class mainly exists to anticipate certain bugs
 * and unexpected behaviors that can otherwise occur with flexbox (especially in IE).
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent flex-parent--center-main'>
 *   <div class='flex-child bg-darken10'>child</div>
 * </div>
 */
.flex-child {
  display: block;
  max-width: 100%;
}
/* Specifically, the above addresses #1, #2, and #12 in https://github.com/philipwalton/flexbugs */

/**
 * Make a child to grow to fill whatever space is available in the main axis of the parent container.
 * This is useful when you have one or more elements of
 * fixed width, and another element that should take up the remaining space in the row.
 *
 * Typically, you will also want to apply the `flex-child--no-shrink` modifier to the element in the row with a fixed width.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent bg-darken10'>
 *  <div class='flex-child flex-child--no-shrink border w240'>child</div>
 *  <div class='flex-child flex-child--grow border'>child</div>
 * </div>
 */
.flex-child--grow {
  flex-grow: 1 !important;
  min-width: 0;
}

/**
 * Prevent a child from shrinking below its width value.
 *
 * By default, flex children (even with specified widths) will shrink as needed to accommodate sibling elements.
 * This class prevents that default shrinkage, forcing siblings to accommodate the parent's width.
 *
 * @memberof Flexbox
 * @example
 * <div class='flex-parent bg-darken10 w240'>
 *  <div class='flex-child flex-child--no-shrink border w120'>child</div>
 *  <div class='flex-child border w120'>child</div>
 *  <div class='flex-child border w120'>child</div>
 * </div>
 */
.flex-child--no-shrink {
  flex-shrink: 0 !important;
}
